{"version":3,"sources":["../../dev/application.js"],"names":["app","Vue","el","data","isLoading","type","currentMonth","editedProject","editedVolunteer","months","volunteers","methods","getFullAddress","volunteer","address","city","locality","country","postal","newVolunteer","firstName","lastName","email","deleteVolunteer","removeVolunteer","userID","filter","it","editVolunteer","_data","clone","saveVolunteer","_newList","push","sendVolunteer","sort","sortProjects","project","newProject","manager","cost","endsOnCurrentMonth","deleteProject","removeProject","projectID","forEach","projects","editProject","saveProject","index","sendProject","map","computed","getRoofOfChart","a","b","getChartY","fill","toFixed","callback","post","then","toCurrency","string","parseFloat","toLocaleString","style","currency","changeType","set","loadData","setMonth","month","get","response","_projects","url","Promise","resolve","reject","_req","XMLHttpRequest","onload","_response","JSON","parse","error","open","setRequestHeader","send","stringify","obj","window","addEventListener"],"mappings":"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","sourcesContent":["const app = new Vue({\r\n    el: \"#app\",\r\n    data: {\r\n        isLoading: true,\r\n        type: \"months\",\r\n        currentMonth: 0,\r\n        editedProject: {},\r\n        editedVolunteer: {},\r\n        months: [{}],\r\n        volunteers: [{}]\r\n    },\r\n    methods: {\r\n        getFullAddress(volunteer){\r\n            return `${volunteer.address}, ${volunteer.city}, ${volunteer.locality}, ${volunteer.country}, ${volunteer.postal}`;\r\n        },\r\n        newVolunteer(){\r\n            this.editedVolunteer = {\r\n                firstName: \"\",\r\n                lastName: \"\",\r\n                email: \"\",\r\n                address: \"\",\r\n                city: \"\",\r\n                locality: \"\",\r\n                country: \"\",\r\n                postal: \"\"\r\n            }\r\n        },\r\n        deleteVolunteer(){\r\n            removeVolunteer(this.editedVolunteer.userID, () => {\r\n                this.volunteers = this.volunteers.filter(it => it.userID != this.editedVolunteer.userID)\r\n                this.editedVolunteer = {};\r\n            })\r\n        },\r\n        editVolunteer(userID){\r\n            const _data = this.volunteers.filter(it => it.userID == userID)[0] || {}\r\n            this.editedVolunteer = clone(_data);\r\n        },\r\n        saveVolunteer(){\r\n            if(this.editedVolunteer.userID){\r\n                const _newList = this.volunteers.filter(it => it.userID != this.editedVolunteer.userID);\r\n                _newList.push(clone(this.editedVolunteer));\r\n                sendVolunteer(this.editedVolunteer, () => {\r\n                    this.editedVolunteer = {};\r\n                    this.volunteers = _newList.sort(sortProjects);\r\n                });\r\n            } else {\r\n                sendVolunteer(this.editedVolunteer, (project) => {\r\n                    const _newList = this.volunteers;\r\n                    this.editedVolunteer.userID = project.userID;\r\n\r\n                    _newList.push(this.editedVolunteer);\r\n                    \r\n                    this.editedVolunteer = {};\r\n                    this.volunteers = _newList.sort(sortProjects);\r\n                });\r\n            }\r\n        },\r\n        newProject(){\r\n            this.editedProject = {\r\n                country: \"\",\r\n                manager: \"\",\r\n                type: \"\",\r\n                cost: 0,\r\n                endsOnCurrentMonth: false\r\n            }\r\n        },\r\n        deleteProject(){\r\n            removeProject(this.editedProject.projectID, () => {\r\n                this.months.forEach(it => {\r\n                    it.projects = it.projects.filter(it => it.projectID != this.editedProject.projectID);\r\n                });\r\n                this.editedProject = {};\r\n            })\r\n        },\r\n        editProject(projectID){\r\n            const _data = this.months[this.currentMonth].projects.filter(it => it.projectID == projectID)[0] || {}\r\n            this.editedProject = clone(_data);\r\n        },\r\n        saveProject() {\r\n            this.editedProject.currentMonth = this.currentMonth;\r\n            if(this.editedProject.projectID){\r\n                this.months.forEach((it, index) => {\r\n                    it.projects = it.projects.filter(it => it.projectID != this.editedProject.projectID)\r\n                    if (!(this.editedProject.endsOnCurrentMonth && index > this.currentMonth))\r\n                        it.projects.push(clone(this.editedProject))\r\n                    it.projects = it.projects.sort(sortProjects);\r\n                });\r\n                sendProject(this.editedProject, () => {\r\n                    this.editedProject = {};\r\n                });\r\n            } else {\r\n                sendProject(this.editedProject, (project) => {\r\n                    this.editedProject.projectID = project.projectID;\r\n\r\n                    this.months = this.months.map((it, index) => {\r\n                        if(index >= this.currentMonth){\r\n                            it.projects.push(clone(this.editedProject))\r\n                            it.projects = it.projects.sort(sortProjects);\r\n                        }\r\n                        return it;\r\n                    });\r\n                    this.editedProject = {};\r\n                });\r\n            }\r\n        }\r\n    },\r\n    computed: {\r\n        getRoofOfChart(){\r\n            return (this.months[this.currentMonth]\r\n                        .projects || [])\r\n                        .map((it) => it.cost)\r\n                        .sort((a, b) => b - a)[0];\r\n        },\r\n        getChartY(){\r\n            return [0, 0, 0, 0, 0]\r\n                .fill(\r\n                    this.getRoofOfChart, \r\n                    0, 4\r\n                )\r\n                .map((it, index) => ((it / (index + 1)) / 1000).toFixed(2) + \"k\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Sends POST request to delete volunteer from the database\r\n * @param { String } userID\r\n * @param { Function } callback \r\n */\r\nconst removeVolunteer = (userID, callback) => \r\n    post(`/api/data/remove/volunteer`, { userID: userID }).then(callback);\r\n\r\n/**\r\n * Sends POST request to delete project from the database\r\n * @param { String } projectID\r\n * @param { Function } callback \r\n */\r\nconst removeProject = (projectID, callback) => \r\n    post(`/api/data/remove/project`, { projectID: projectID }).then(callback);\r\n\r\n/**\r\n * Sends the updated project information to the server\r\n * @param { JSON } project \r\n * @param { Function } callback \r\n */\r\nconst sendProject = (project, callback) => \r\n    post(`/api/data/edit/project`, { project: project }).then(callback);\r\n\r\n/**\r\n * Sends the updated volunteer information to the server\r\n * @param { JSON } volunteer \r\n * @param { Function } callback \r\n */\r\nconst sendVolunteer = (volunteer, callback) => \r\n    post(`/api/data/edit/volunteer`, { volunteer: volunteer }).then(callback);\r\n\r\n/**\r\n * Sorts the projects based on country name and project type\r\n * @param { JSON } a \r\n * @param { JSON } b \r\n */\r\nconst sortProjects = (a, b) => {\r\n    if(a.country == b.country) return a.type > b.type ? 1 : -1;\r\n    else return a.country > b.country ? 1 : -1;\r\n};\r\n\r\n/**\r\n * Converts a number in string format to US currency\r\n * @param { String } string \r\n */\r\nconst toCurrency = (string) => \r\n    parseFloat(string)\r\n        .toLocaleString(undefined, { \r\n            style: \"currency\", \r\n            currency: \"USD\" \r\n        });\r\n\r\n/**\r\n * Updates the type variable and loads the data\r\n * @param { String } type Either 'months' or 'volunteers'\r\n */\r\nconst changeType = (type) => {\r\n    Vue.set(app, \"editedProject\", {});\r\n    Vue.set(app, \"type\", type);\r\n    loadData(type);\r\n}\r\n\r\n/**\r\n * Sets the current month\r\n * @param { Number } month \r\n */\r\nconst setMonth = (month) => {\r\n    Vue.set(app, \"editedProject\", {});\r\n    Vue.set(app, \"currentMonth\", month);\r\n}\r\n\r\n/**\r\n * Hides the application while a GET request is made to \r\n * the server to retrieve the data\r\n * @param { String } type Either 'months' or 'volunteers'\r\n */\r\nconst loadData = (type) => {\r\n    Vue.set(app, \"isLoading\", true);\r\n    get(`/api/data/${type}`).then((response)=> {\r\n        if(type == 'months')\r\n            response = response.map(it => {\r\n                const _projects = (it.projects || []).sort(sortProjects);\r\n                it.projects = _projects;\r\n                return it;\r\n            });\r\n\r\n        Vue.set(app, type, response)\r\n        Vue.set(app, \"isLoading\", false);\r\n    });\r\n}\r\n\r\n/**\r\n * Executes a POST request and responds as a Promise\r\n * @param { String } url \r\n * @param { JSON } data \r\n */\r\nconst post = (url, data) => new Promise((resolve, reject) => {\r\n    const _req = new XMLHttpRequest();\r\n    _req.onload = () => {\r\n        const _response = JSON.parse(_req.response);\r\n        if(_response.error) reject(_response);\r\n        else resolve(_response);\r\n    };\r\n    _req.open(\"POST\", url);\r\n    _req.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n    _req.send(JSON.stringify(data));\r\n});\r\n\r\n/**\r\n * Executes a GET request and responds as a Promise\r\n * @param { String } url \r\n */\r\nconst get = (url) => new Promise((resolve, reject) => {\r\n    const _req = new XMLHttpRequest();\r\n    _req.onload = () => {\r\n        const _response = JSON.parse(_req.response);\r\n        if(_response.error) reject(_response);\r\n        else resolve(_response);\r\n    };\r\n    _req.open(\"GET\", url);\r\n    _req.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n    _req.send();\r\n});\r\n\r\n/**\r\n * Clones the JSON object as a seperate object\r\n * @param { JSON } obj \r\n */\r\nconst clone = (obj) => JSON.parse(JSON.stringify(obj));\r\n\r\nwindow.addEventListener(\"load\", ()=>{\r\n    loadData(\"months\");\r\n})"],"file":"application.js"}